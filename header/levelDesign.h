#ifndef _LEVELDESIGN_H                 // Prevent multiple definitions if this 
#define _LEVELDESIGN_H                 // file is included in more than one place
#define WIN32_LEAN_AND_MEAN

#include "constants.h"
#include "entity.h"

namespace levelDesignNS
{
	const int WIDTH = 32;								// image width
	const int HEIGHT = 32;								// image height

	const int X = 0;									// location on screen
	const int Y = 0;

	// Level Design 
	const int TEXTURE_SIZE = 32;
	const int TEXTURE_COLS = 6;
	const int MINIMAP_TEXTURE_SIZE = 8;
	const int MINIMAP_TEXTURE_COLS = 2;
	const int MAP_HEIGHT = 21;
	const int MAP_WIDTH = 92;
	const int __ = -1;                  // empty tile

	const int tileMap[MAP_HEIGHT][MAP_WIDTH] = {
		0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, 
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, 
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, 3 , __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, __, 5 , __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, 0 , 0 , 0 , __, __, 0 , 0 , __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 1 , 1 , 0 , __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
		0 , __, __, __, 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, 5 , __, __, __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, 0 , __, __, __, __, __, __, __, 1 , __, 5 , __, __, __, 3 , 3 , __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, 0 , 0 , __, __, __, __, 2 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, 3 , __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		__, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 2 , 0 , 0 , 0 , __, __, 0 , __, __, __, __, __, __, __, __,
		__, __, __, __, __, 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		__, __, __, __, 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, 5 , __, __, __, __, 5 , __, __, __, __, __, __, __, __, __, 0 , __, __, __, __, __, __, __, __,
		0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , __, __, __, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __,
		0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __, __, __, __, __, __, __, __,
	/*  0									    10									    20                                       30                                      40                                      50                                      60                                      70                                      80                                      90*/  
	};
}

// inherits from Entity class
class LevelDesign : public Entity
{
private:
	bool isActive;
public:
	// constructor
	LevelDesign();
	// 
	virtual void draw();
	virtual bool initialize(Game *gamePtr, int width, int height, int ncols,
		TextureManager *textureM);
	// destructor
	~LevelDesign();
};
#endif